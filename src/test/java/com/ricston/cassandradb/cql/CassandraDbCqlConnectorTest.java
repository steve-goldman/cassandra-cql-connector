/**
 *
 * Copyright (c) Ricston Ltd.  All rights reserved.  http://www.ricston.com
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */

/**
 * This file was automatically generated by the Mule Development Kit
 */
package com.ricston.cassandradb.cql;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.cassandraunit.CassandraCQLUnit;
import org.cassandraunit.dataset.cql.ClassPathCQLDataSet;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.mule.api.MuleEvent;
import org.mule.streaming.ConsumerIterator;
import org.mule.tck.junit4.FunctionalTestCase;

public class CassandraDbCqlConnectorTest extends FunctionalTestCase
{
	@Rule
    public CassandraCQLUnit cassandraCQLUnit = new CassandraCQLUnit(new ClassPathCQLDataSet("simple.cql","cassandra_unit_keyspace"));
	
	public CassandraDbCqlConnectorTest(){
		super();
		this.setDisposeContextPerClass(true);
	}
	
	
    @Test
    public void testSelect() throws Exception
    {
    	Map<String, Object> payload = new HashMap<String, Object>();
    	payload.put("id", "65b09341-cfc5-4ec6-a778-b6b5eabc61f1");
    	
    	MuleEvent event = runFlow("selectFlow", payload);
    	@SuppressWarnings("unchecked")
		List<Map<String, Object>> resultPayload = (List<Map<String, Object>>) event.getMessage().getPayload();
    	Assert.assertEquals("value001", resultPayload.get(0).get("value"));
    }

    @Test
    public void testSelectStreaming() throws Exception
    {
        Map<String, Object> payload = new HashMap<String, Object>();
        payload.put("id", "65b09341-cfc5-4ec6-a778-b6b5eabc61f1");

        MuleEvent event = runFlow("selectStreamingFlow", payload);
        @SuppressWarnings("unchecked")
        ConsumerIterator<Map<String, Object>> resultPayload = (ConsumerIterator<Map<String, Object>>) event.getMessage().getPayload();
        Assert.assertEquals("value001", resultPayload.next().get("value"));
    }

    @Test
    public void testInsert() throws Exception
    {
    	Map<String, Object> payload = new HashMap<String, Object>();
    	payload.put("id", "65b09341-cfc5-4ec6-a778-b6b5eabc61f6");
    	payload.put("name", "name surname");
    	
    	runFlow("insertFlow", payload);
    	
    	MuleEvent event = runFlow("selectFlow", payload);
    	
    	@SuppressWarnings("unchecked")
		List<Map<String, Object>> resultPayload = (List<Map<String, Object>>) event.getMessage().getPayload();
    	Assert.assertEquals("name surname", resultPayload.get(0).get("value"));
    }
    
    @Test
    public void testBulkUpdate() throws Exception{
    	List<Map<String, Object>> payload = new ArrayList<Map<String, Object>>();
    	
    	Map<String, Object> item = new HashMap<String, Object>();
    	item.put("id", "65b09341-cfc5-4ec6-a778-b6b5eabc61f1");
    	item.put("name", "name surname");
    	payload.add(item);
    	
    	item = new HashMap<String, Object>();
    	item.put("id", "65b09341-cfc5-4ec6-a778-b6b5eabc61f2");
    	item.put("name", "name surname");
    	payload.add(item);
    	
    	item = new HashMap<String, Object>();
    	item.put("id", "65b09341-cfc5-4ec6-a778-b6b5eabc61f3");
    	item.put("name", "name surname");
    	payload.add(item);
    	
    	runFlow("updateBulkFlow", payload);
    	
    	MuleEvent event = runFlow("selectFlow", item);
    	
    	@SuppressWarnings("unchecked")
		List<Map<String, Object>> resultPayload = (List<Map<String, Object>>) event.getMessage().getPayload();
    	Assert.assertEquals("name surname", resultPayload.get(0).get("value"));
    }
	
	@Override
    protected String getConfigFile()
    {
        return "mule-config.xml";
    }

}
